
// This is a server-side file
'use server';

/**
 * @fileOverview Provides spiritual interpretations of angel number sightings in multiple languages.
 *
 * - interpretAngelNumber - A function that interprets angel numbers.
 * - InterpretAngelNumberInput - The input type for the interpretAngelNumber function.
 * - InterpretAngelNumberOutput - The return type for the interpretAngelNumber function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { languages } from '@/lib/types'; // Import languages for schema

const InterpretAngelNumberInputSchema = z.object({
  number: z.number().describe('The angel number that was sighted.'),
  emotion: z.string().describe('The emotional state of the user.'),
  activity: z.string().describe('The activity the user was engaged in.'),
  notes: z.string().optional().describe('Any notes the user made.'),
  targetLanguage: z.enum(languages).describe('The language in which the interpretation should be generated.'),
});
export type InterpretAngelNumberInput = z.infer<
  typeof InterpretAngelNumberInputSchema
>;

// Output schema descriptions remain in English as they instruct the LLM on structure.
// The content generated by the LLM for these fields will be in targetLanguage.
const InterpretAngelNumberOutputSchema = z.object({
  theMessage: z.string().describe("The core meaning of the angel number sighting (e.g., 'Alignment and manifestation')."),
  spiritualSignificance: z.string().describe("The deeper spiritual context (e.g., 'A sign of spiritual awakening')."),
  ancientWisdom: z.string().describe("Connections to traditional wisdom or numerology (e.g., 'In Vedic numerology, 111 represents the trinity')."),
  context: z.string().describe("Personalized insight based on the user's emotion, activity, and notes (e.g., 'Your joyful state while meditating suggests alignment')."),
  quote: z.string().describe("An inspirational saying or quote related to the interpretation (e.g., 'When you make a choice, you change the future. - Deepak Chopra')."),
  metaphor: z.string().describe("Poetic imagery or a metaphor to illustrate the message (e.g., 'Like seeds sprouting, your thoughts are becoming reality')."),
  reflectionQuestion: z.string().describe("An introspection prompt for the user (e.g., 'What intentions are you ready to manifest?')."),
});
export type InterpretAngelNumberOutput = z.infer<
  typeof InterpretAngelNumberOutputSchema
>;

export async function interpretAngelNumber(
  input: InterpretAngelNumberInput
): Promise<InterpretAngelNumberOutput> {
  return interpretAngelNumberFlow(input);
}

const interpretAngelNumberPrompt = ai.definePrompt({
  name: 'interpretAngelNumberPrompt',
  input: {schema: InterpretAngelNumberInputSchema},
  output: {schema: InterpretAngelNumberOutputSchema},
  prompt: `You are a spiritual guide specializing in numerology, astrology, and cosmic wisdom.
Interpret the angel number {{{number}}} for a user who was feeling {{{emotion}}} while engaged in "{{{activity}}}".
Their personal notes about the sighting are: "{{{notes}}}"

Generate the entire interpretation in the language: {{{targetLanguage}}}.

Respond with the following structured interpretation. Use cosmic, poetic language throughout.

1.  **The Message**: (Core meaning of the number)
2.  **Spiritual Significance**: (Deeper spiritual context and insights)
3.  **Ancient Wisdom**: (Connect to numerology, Vedic wisdom, or other traditions)
4.  **Context**: (Personalize the interpretation based on the user's emotion, activity, and notes)
5.  **Quote**: (Provide an inspirational quote that resonates with the message)
6.  **Metaphor**: (Offer a poetic metaphor to illustrate the interpretation)
7.  **Reflection Question**: (Pose a thoughtful question for the user to ponder)

Ensure each section is clearly defined and provides insightful, uplifting guidance in {{{targetLanguage}}}.
  `,
});

const interpretAngelNumberFlow = ai.defineFlow(
  {
    name: 'interpretAngelNumberFlow',
    inputSchema: InterpretAngelNumberInputSchema,
    outputSchema: InterpretAngelNumberOutputSchema,
  },
  async input => {
    const {output} = await interpretAngelNumberPrompt(input);
    if (!output) {
      throw new Error('Failed to get interpretation from AI model.');
    }
    return output;
  }
);
